#!/usr/bin/env python3

import rerun as rr
from pathlib import Path
import argparse
import polars as pl
import json
from pprint import pformat


def log_stuff(filepath: Path) -> None:
    # trial_name = filepath.stem
    # for file in filepath.iterdir():
    trial_name = filepath.parent.parent.stem
    trial_number = filepath.parent.stem
    file = filepath
    if file.suffix == ".json" and file.stem.endswith("results"):
        with open(file, "r") as f:
            results = json.load(f)
            text = pformat(results)  # ['experiment']}"
            fold, _ = file.stem.split("_", 1)
            rr.log(f"result/{trial_name}/{trial_number}/{fold}", rr.TextDocument(text), timeless=True)

    elif file.suffix == ".csv" and file.stem.endswith(("train", "val")):
        fold, subset = file.stem.split("_", 1)
        df = pl.read_csv(file)

        for epoch, row in df.rows_by_key(key=["epoch"], named=True, unique=True).items():
            rr.set_time_sequence("epoch", epoch)
            for metric, value in row.items():
                log_name = f"{metric}/{trial_name}/{trial_number}/{fold}/{subset}"
                if epoch == 1:
                    color = (0, 128, 0) if subset == "train" else (255, 0, 0)
                    rr.log(log_name, rr.SeriesLine(name=f"{metric}/{subset}", color=color), timeless=True)
                rr.log(log_name, rr.Scalar(value))


def main():
    parser = argparse.ArgumentParser(
        description="""
        Loads files
        """
    )
    parser.add_argument("filepath", type=str)
    parser.add_argument("--recording-id", type=str)
    args = parser.parse_args()

    filepath = Path(args.filepath)

    if filepath.suffix not in [".csv", ".json"]:
        exit(rr.EXTERNAL_DATA_LOADER_INCOMPATIBLE_EXIT_CODE)

    rr.init("rerun_loader_test", recording_id="metrics")
    # Log to stdout so Rerun Viewer can ingest
    rr.stdout()

    log_stuff(filepath)


if __name__ == "__main__":
    main()
